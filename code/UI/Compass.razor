@using System
@using Sandbox
@using Sandbox.UI
@namespace SdfWorld.UI
@inherits Panel

<root>

</root>

@code
{
	public LocalPlayer Player => Scene.GetAllComponents<LocalPlayer>().FirstOrDefault();

	public const float FieldOfView = 270f;

	public override bool HasContent => true;

	public override void DrawContent( ref RenderState state )
	{
		var rect = Box.Rect;
		var localPlayerPos = Player.WorldPosition;

		base.DrawContent( ref state );

		foreach ( var player in Scene.GetAllComponents<RemotePlayer>() )
		{
			var diff = (Vector2)(player.WorldPosition - localPlayerPos);
			var angle = MathF.Atan2( diff.y, diff.x ) * 180f / MathF.PI;

			var (x, alpha) = GetMarkerDrawInfo( rect, angle );

			var playerRect = new Rect( x - rect.Height * 0.5f, rect.Top, rect.Height, rect.Height );
			var dist = Math.Max( diff.Length, 1f );
			var distFade = dist < 128f
				? dist.Remap( 128f, 256f )
				: dist.Remap( 65536f, 1024f, 0.25f );

			Graphics.DrawIcon( playerRect.Contain( new Vector2( rect.Height * 0.75f * distFade ) ), "person", Color.White.WithAlpha( alpha * distFade ), 24f * distFade );
		}
	}

	private (float X, float Alpha) GetMarkerDrawInfo( Rect rect, float angle )
	{
		var cameraAngle = Scene.Camera?.WorldRotation.Yaw() ?? 0f;
		var t = (cameraAngle - angle) / 360f;
		t -= MathF.Floor( t + 0.5f );

		t *= 360f / FieldOfView;
		t += 0.5f;

		return (rect.Left + t * rect.Width, t < 0.125f ? Math.Clamp( t / 0.125f, 0f, 1f )
			: t > 0.875f ? Math.Clamp( (1f - t) / 0.125f, 0f, 1f )
			: 1f);
	}

	public override void DrawBackground( ref RenderState state )
	{
		var rect = Box.Rect;

		base.DrawBackground( ref state );

		for ( var tickAngle = 0; tickAngle < 360; tickAngle += 5 )
		{
			var isMajor = tickAngle % 45 == 0;
			var tickHeight = isMajor ? 0.667f : 0.333f;

			var (x, alpha) = GetMarkerDrawInfo( rect, tickAngle );

			var tickRect = new Rect( x - 0.5f, rect.Top + rect.Height * (1f - tickHeight) * 0.5f, 1f, rect.Height * tickHeight );

			if ( tickAngle % 90 == 0 )
			{
				var label = tickAngle switch
				{
					0 => "N",
					90 => "W",
					180 => "S",
					270 => "E",
					_ => "?"
				};

				Graphics.DrawText( tickRect.Grow( 16f, 0f ), label, Color.White.WithAlpha( alpha ), fontSize: rect.Height * 0.75f );
				continue;
			}

			Graphics.DrawRoundedRectangle( tickRect, Color.White.WithAlpha( isMajor ? alpha * 0.5f : alpha * 0.25f ) );
		}
	}
}
